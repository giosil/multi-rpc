# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  DEW_GLOBAL_VAR: "dew code"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  variables:
    DEW_JOB_VAR: "DEW Compiling"
  stage: build
  script:
    - echo "$DEW_JOB_VAR the $DEW_GLOBAL_VAR..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 8 seconds."
    - echo "CI_PROJECT_NAME = $CI_PROJECT_NAME"
    - echo "CI_PROJECT_NAMESPACE = $CI_PROJECT_NAMESPACE"
    - echo "CI_PROJECT_PATH = $CI_PROJECT_PATH"
    - echo "CI_PROJECT_URL = $CI_PROJECT_URL"
    - echo "GITLAB_USER_ID = $GITLAB_USER_ID"
    - echo "CI_COMMIT_AUTHOR = $CI_COMMIT_AUTHOR"
    - echo "CI_COMMIT_BRANCH = $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_MESSAGE = $CI_COMMIT_MESSAGE"
    - echo "CI_COMMIT_TITLE = $CI_COMMIT_TITLE"
    - echo "CI_JOB_NAME = $CI_JOB_NAME"
    - echo "CI_JOB_STAGE = $CI_JOB_STAGE"
    - echo "CI_PIPELINE_SOURCE = $CI_PIPELINE_SOURCE"
    - sleep 8
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 4 seconds."
    - sleep 4
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  rules:
    - if: '($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop") && $CI_PIPELINE_SOURCE == "push"'
      when: manual # never,always,manual,on_success (default)
      allow_failure: true
      changes:
        - src/**/*
        - .gitlab-ci.yml
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
